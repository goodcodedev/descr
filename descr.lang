Source (items:sourceItems)

sourceItems:SourceItem[] WS {
    AstSingle,
    AstMany,
    List,
    Comment
}

Comment("(*" comment:!"*)" "*)")

Annotation(
    @syntax(name="keyword.control")
    "@"
    @syntax(name="entity.name.function")
    ident
    AnnotArgs?
)

AnnotArgs(LPAREN annotArgList RPAREN)

annotArgList:AnnotArg[] COMMA {
    AnnotArg(key:ident EQUAL AnnotArgVal)
}
AnnotArgVal {
    Quoted(string),
    Ident(ident),
    IntConst(int)
}
annots[] WS Annotation

AstSingle(
    annots
    @syntax(name="entity.name.type")
    ident 
    LPAREN 
    tokens:tokenList 
    RPAREN
)
AstMany(
    annots
    @syntax(name="entity.name.type")
    ident
    LBRACE
    items:astItems 
    RBRACE
)

tokenList:Token[] WS {
    NamedToken(
        annots
        @syntax(name="variable.name")
        name:ident COLON
        @syntax(name="keyword.control")
        not:EXCL? 
        TokenType
        @syntax(name="keyword.control")
        optional:QUESTION?
    ),
    SimpleToken(
        annots
        @syntax(name="keyword.control")
        not:EXCL? 
        TokenType
        @syntax(name="keyword.control")
        optional:QUESTION?
    ),
    TokenGroup(
        annots
        @syntax(name="keyword.control")
        not:EXCL? 
        LPAREN
        tokenList
        RPAREN
        @syntax(name="keyword.control")
        optional:QUESTION?
    )
}

TokenType {
    FuncToken(ident LPAREN fnArgs RPAREN),
    KeyToken(
        @syntax(name="storage.type")
        key:ident
    ),
    string => Quoted
}
fnArgs:FuncArg[] COMMA {
    string => Quoted
}

astItems[] COMMA AstItem
AstItem {
    AstDef(annots tokens:tokenList "=>" ident?),
    AstDef(annots LPAREN tokens:tokenList RPAREN "=>" ident?),
    AstDef(
        annots
        @syntax(name="entity.name.type")
        ident?
        LPAREN tokens:tokenList RPAREN),
    AstRef(ident)
}

List {
    ListSingle(annots
        @syntax(name="entity.name.type")
        ident LBRACKET RBRACKET sep:ident reference:ident),
    ListMany(annots 
        @syntax(name="entity.name.function")
        ident COLON
        @syntax(name="entity.name.type")
        ast_type:ident LBRACKET RBRACKET sep:ident? LBRACE items:listItems RBRACE)
}
listItems[] COMMA ListItem
ListItem(AstItem sep:ident?)
